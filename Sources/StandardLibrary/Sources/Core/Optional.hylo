/// Either an instance of `T` or the absence thereof.
///
/// Use `Optional` when you need to represent a value that may or may not be present.
public typealias Optional<T> = Union<T, None<T>>

/// The absence of an instance of `T`.
public type None<T>: Regular {

  /// Creates a value denoting the absence of an instance of `T`.
  public memberwise init

  // TODO: Remove when #1078 is implemented.
  public fun infix==(_ other: Self) -> Bool {
    true
  }

}

public extension Optional {

  /// Returns a value denoting the absence of an instance.
  public static fun none() -> Self {
    None() as Optional
  }

}

/// A contiguous, one-dimensional space whose values can be offset and measured.
///
/// - Important: Default implementations of `infix==` and `infix<` are available if `Stride`
///   conforms to `Deinitializable`. These implementations depend on `Stride`'s implementation,
///   meaning that if a type conforming to `Strideable` is its own `Stride` type, it must also
///   provide its own implementations of `infix==` and `infix<` to avoid infinite recursion.
public trait Strideable: Comparable {

  /// A distance between two instances of `Self`.
  type Stride: SignedNumeric, Comparable

  /// Returns the offset to be added to `self` to get `other`.
  ///
  /// - Complexity: O(1).
  fun offset(to other: Self) -> Stride

  /// Returns `self` offset by the given amount.
  ///
  /// The absolute value of `offset` is the distance between `self` and the returned value. If
  /// `offset` is positive or negative, the returned value is greater or lesser then `self`,
  /// respectively. Otherwise, the returned value is equal to `self`.
  ///
  /// - Complexity: O(1).
  fun advance(by offset: Stride) -> Self

}

public extension Strideable where Stride: Deinitializable {

  public fun infix== (_ other: Self) -> Bool {
    offset(to: other) == Stride.zero()
  }

  public fun infix< (_ other: Self) -> Bool {
    offset(to: other) > Stride.zero()
  }

}

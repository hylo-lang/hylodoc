trait TraitA {}
trait TraitB {}

type MyType : TraitA, TraitB {
  // public typealias Element = Float64

  public var radians: Float64
  // public let member2 = "What"
  // public static let member3: Int

  // public init(first m1: Float64, _ m2: Int) {}

  // public static subscript(_ n: Int): Float64 {}
  public subscript nice(): Int {}

  // public subscript min_inout(_ x: inout Int, y: inout Int): Int {
  //   inout { if y > x { &x } else { &y } }
  // }

  // public subscript min(_ x: yielded Int, _ y: yielded Int): Int {
  //   let   { if y > x { x } else { y } }
  //   inout { if y > x { &x } else { &y } }
  // }

  // public subscript min(_ x: yielded Int, _ y: yielded Int): Int {
  //   inout { if y > x { &x } else { &y } }
  //   set   { if y > x { &x = new_value } else { &y = new_value } }
  // }

  // public fun functionLarge(hello hello: Int, _ world: Float64) inout -> Int {}
  // public fun functionSmall(_ world: Float64) -> Int {}
  // public static fun functionTiny() {}

  // public fun foo(_ x: Self, n: Int) -> Float64 {
  //   let   { }
  //   sink  { }
  //   inout { }
  // }

  public property degrees: Float64 {
    let {
      radians * 180.0 / Float64.pi()
    }
    inout {
      var d = radians * 180.0 / Float64.pi()
      yield &d
      radians = d * Float64.pi() / 180.0
    }
  }
}
trait TraitA {}
trait TraitB {}

type MyType : TraitA, TraitB {
  public typealias Element = Float64

  public var radians: Float64
  public let member2 = "What"
  public static let member3: Element

  public init(first m1: Float64, _ m2: Int) {}

  public static subscript(_ n: Element): Float64 {}
  public subscript nice(): Int {}

  public subscript min_inout(_ x: inout Int, y: inout Int): Int {
    inout { if y > x { &x } else { &y } }
  }

  public subscript min(_ x: yielded Int, _ y: yielded Int): Int {
    let   { if y > x { x } else { y } }
    inout { if y > x { &x } else { &y } }
  }

  // public subscript min(_ x: yielded Int, _ y: yielded Int): Int {
  //   inout { if y > x { &x } else { &y } }
  //   set   { if y > x { &x = new_value } else { &y = new_value } }
  // }

  public fun functionLarge(hello hello: Int, _ world: Float64) inout -> Element {}
  public fun functionSmall(_ world: Element) -> Int {}
  public static fun functionTiny() {}

  public fun foo(_ x: Self, n: Int) -> Float64 {
    let   { }
    sink  { }
    inout { }
  }

  public property degrees: Float64 {
    let { }
    inout { }
  }
}
/// A value that can be either `true` or `false`.
public type Bool {

  internal var value: Builtin.i1

  internal memberwise init

  /// Creates an instance with value `false`.
  public init() {
    &self.value = Builtin.zeroinitializer_i1()
  }

  /// Returns the logical conjunction of `self` and `other`.
  public fun infix&& (_ rhs: Bool) -> Bool {
    Bool(value: Builtin.and_i1(self.value, rhs.value))
  }

  /// Returns the logical disjunction of `self` and `other`.
  public fun infix|| (_ rhs: Bool) -> Bool {
    Bool(value: Builtin.or_i1(self.value, rhs.value))
  }

  /// Toggles the Boolean variable's value.
  public fun toggle() inout {
    &self = !self
  }

  /// Returns negation of `self`.
  public fun prefix! () -> Bool {
    // Non-obvious; implement negation by comparing to 0.
    Bool(value: Builtin.icmp_eq_i1(value, Builtin.zeroinitializer_i1()))
  }

  public fun description() -> String {
    if self { "true" } else { "false" }
  }

}

public conformance Bool: Deinitializable {}

public conformance Bool: Movable {}

public conformance Bool: Copyable {

  public fun copy() -> Self {
    Bool(value: value)
  }

}

public conformance Bool: Equatable {

  public fun infix== (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_eq_i1(value, other.value))
  }

  public fun infix!= (_ other: Self) -> Bool {
    Bool(value: Builtin.icmp_ne_i1(value, other.value))
  }

}

public conformance Bool: Regular {}

type MyType : TraitA, TraitB {
  public typealias Element = Float64

  public var radians: Float64
  public let member2 = "What"
  public static let member3: Element

  public init(first m1: Float64, _ m2: Int) {}

  /// My summary for this function
  ///
  /// Details go here, reference to ``member2``
  /// ```hylo
  /// let example = functionLarge(hello: 0, world: 0.0)
  /// print(example)
  /// ```
  ///
  /// An enumeration:
  /// 1. A
  /// 2. B
  ///
  /// An unordered list:
  /// - A
  /// - B
  /// - C
  /// ---
  /// > Block _quote_
  ///
  /// # Parameters:
  /// - hello: hello from the other side
  /// - world: or word, I *wonder*
  ///
  /// # Preconditions:
  /// - Invar *A* or **A**
  /// - Invar `B` or ~~B~~
  ///
  /// # Returns: some element
  ///
  /// # Complexity:
  /// - time: O(n)
  /// - space: O(n)
  public fun functionLarge(hello hello: Int, _ world: Float64) inout -> Element {}
  public fun functionSmall(_ world: Element) -> Int {}
  public static fun functionTiny() {}

  public fun foo(_ x: Self, n: Int) -> Float64 {
    let   { }
    sink  { }
    inout { }
  }

  public property degrees: Float64 {
    let { }
    inout { }
  }
}